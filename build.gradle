/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2014 - 2015  Lee Collins
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'application'
apply plugin: 'maven'

mainClassName = 'io.github.javaconductor.gserv.Main'
group = "io.github.javaconductor"
version = "0.9.9"
sourceCompatibility = 1.6

task wrapper(type: Wrapper) {
    gradleVersion = '2.0'
}

sourceSets {
    integrationTest {
        java.srcDir file('src/integrationTest/groovy')
        resources.srcDir file('src/integrationTest/resources')
    }
    test {
        java.srcDir file('src/integrationTest/groovy')
        resources.srcDir file('src/integrationTest/resources')
    }
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}

check.dependsOn integrationTest

repositories {
    mavenCentral()
    //mavenLocal()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.5'
    compile 'log4j:log4j:1.2.17'
    compile 'org.codehaus.groovy:groovy-all:2.3.7'
    compile('org.codehaus.gpars:gpars:1.1.0')
    compile('commons-io:commons-io:2.4')
    compile 'commons-cli:commons-cli:1.2'

    /// needed for Grab/Grape
    compile 'org.apache.ivy:ivy:2.2.0'
    compile 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'

    testCompile 'com.github.rest-driver:rest-server-driver:1.1.42'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
//    testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'
    testCompile 'org.spockframework:spock-core:1.0-groovy-2.3'

    testCompile 'cglib:cglib-nodep:3.1'
    testCompile 'org.objenesis:objenesis:1.2'
    testCompile "junit:junit:4.11"

    integrationTestCompile sourceSets.main.output
    integrationTestCompile configurations.testCompile
    integrationTestCompile sourceSets.test.output
    integrationTestRuntime configurations.testRuntime
}

task integration(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}

groovydoc {

}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task groovydocJar(type: Jar, dependsOn: groovydoc) {
    classifier = 'groovydoc'
    from groovydoc.destinationDir
}

jar {
    manifest {
        attributes(["Main-Class": "io.github.javaconductor.gserv.Main"])
        attributes(["Specification-Title": "gServ"])
        attributes(["Specification-Version": "$version"])
        attributes(["Specification-Vendor": "Lee Collins"])
        attributes(["Implementation-Title": "gServ"])
        attributes(["Implementation-Version": "$version"])
        attributes(["Implementation-Vendor": "Lee Collins"])
    }
}

task standaloneJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.output.classesDir
    from {
        sourceSets.main.output.collect {
            println it
            it.isDirectory() ? it : zipTree(it)
        }
        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
        configurations.runtime.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
//    include sourceSets.main.output.classesDir.name
    manifest {
        attributes(["Main-Class": "io.github.javaconductor.gserv.Main"])
        attributes(["Specification-Title": "gServ"])
        attributes(["Specification-Version": "$version"])
        attributes(["Specification-Vendor": "Lee Collins"])
        attributes(["Implementation-Title": "gServ"])
        attributes(["Implementation-Version": "$version-${new Date().time}"])
        attributes(["Implementation-Vendor": "Lee Collins"])
    }
    archiveName = "gservApp-${version}.jar"
}

task createDist(type: Copy, dependsOn: standaloneJar) {

    from('build/libs') {
        include "gservApp-${version}.jar"
        rename "gservApp-${version}.jar", 'gserv.jar'
    }
    into 'dist'
}

createDist.mustRunAfter(standaloneJar)

artifacts {
    archives standaloneJar
    archives sourcesJar
    archives groovydocJar
}
